{
  "name": "mt-latlon",
  "version": "0.0.3",
  "description": "Latitude/longitude spherical geodesy formulae and scripts.",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/peterhaldbaek/mt-latlon.git"
  },
  "keywords": [
    "geodesy",
    "geo",
    "latitude",
    "longitude"
  ],
  "author": {
    "name": "Peter Haldbæk",
    "email": "peter.haldbaek@gmail.com"
  },
  "contributors": [
    {
      "name": "Peter Haldbæk",
      "email": "peter.haldbaek@gmail.com",
      "url": "https://github.com/peterhaldbaek"
    }
  ],
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/peterhaldbaek/mt-latlon/issues"
  },
  "homepage": "https://github.com/peterhaldbaek/mt-latlon",
  "dependencies": {
    "mt-geo": "0.0.2"
  },
  "readme": "mt-latlon\n=========\n\nLatitude/longitude spherical geodesy formulae and scripts.\n\n\nInstallation\n------------\n\n    $ npm install mt-latlon\n\n\nUsage\n-----\n\nThe module exposes the `LatLon` class which represents a point on the earth's surface. With this class you can create `LatLon` objects on which you can perform various operations.\n\n    var LatLon = require('mt-latlon');\n    var point = new LatLon(51.5136, -0.0983);\n\nThe available operations of the `LatLon` objects is listed below.\n\n\n### LatLon(lat, lon, rad)\n\nCreates a point on the earth's surface at the supplied latitude/longitude.\n\n- __lat__ (number) latitude in numeric degrees\n- __lon__ (number) longitude in numeric degrees\n- __rad__ (number, default = 6371) radius of earth if different value is required from standard 6,371km\n\n```\nvar point = new LatLon(51.5136, -0.0983);\n```\n\n\n### distanceTo(point, precision)\n\nReturns the distance from this point to the supplied point, in km (using Haversine formula).\nSource: Haversine formula - R. W. Sinnott, \"Virtues of the Haversine\", Sky and Telescope, vol 68, no 2, 1984.\n\n- __point__ (LatLon) Latitude/longitude of destination point\n- __precision__ (number, default = 4) Number of significant digits to use for returned value\n\n```\nvar p1 = new LatLon(51.5136, -0.0983);\nvar p2 = new LatLon(51.4778, -0.0015);\nvar dist = p1.distanceTo(p2);\n// => 7.794\n```\n\n\n### bearingTo(point)\n\nReturns the (initial) bearing from this point to the supplied point, in degrees.\n(see http://williams.best.vwh.net/avform.htm#Crs)\n\n- __point__ (LatLon) Latitude/longitude of destination point\n\n```\nvar p1 = new LatLon(51.5136, -0.0983);\nvar p2 = new LatLon(51.4778, -0.0015);\nvar brng = p1.bearingTo(p2);\n// => 120.67420693455165\n```\n\n\n### finalBearingTo(point)\n\nReturns final bearing arriving at supplied destination point from this point; the final bearing will differ from the initial bearing by varying degrees according to distance and latitude.\n\n- __point__ (LatLon) Latitude/longitude of destination point\n\n```\nvar p1 = new LatLon(51.5136, -0.0983);\nvar p2 = new LatLon(51.4778, -0.0015);\nvar brng = p1.finalBearingTo(p2);\n// => 120.74995889218458\n```\n\n\n### midpointTo(point)\n\nReturns the midpoint between this point and the supplied point.\n(see http://mathforum.org/library/drmath/view/51822.html for derivation)\n\n- __point__ (LatLon) Latitude/longitude of destination point\n\n```\nvar p1 = new LatLon(51.5136, -0.0983);\nvar p2 = new LatLon(51.4778, -0.0015);\nvar p3 = p1.midpointTo(p2);\n// p3 = 51°29′45″N, 000°03′00″W (as LatLon object)\n```\n\n\n### destinationPoint(brng, dist)\n\nReturns the destination point from this point having travelled the given distance (in km) on the \ngiven initial bearing (bearing may vary before destination is reached).\n(see http://williams.best.vwh.net/avform.htm#LL)\n\n- __brng__ (number) Initial bearing in degrees\n- __dist__ (number) Distance in km\n\n```\nvar p1 = new LatLon(51.5136, -0.0983);\nvar p2 = p1.destinationPoint(120, 10);\n// p2 = 51°28′07″N, 000°01′36″E (as LatLon object)\n```\n\n\n### LatLon.intersection(p1, brng1, p2, brng2)\n\nReturns the point of intersection of two paths defined by point and bearing. `null` is returned if no unique intersection is defined.\n(see http://williams.best.vwh.net/avform.htm#Intersection)\n\n- __p1__ (LatLon) First point\n- __brng1__ (number) Initial bearing from first point\n- __p2__ (LatLon) Second point\n- __brng2__ (number) Initial bearing from second point\n\n```\nvar p1 = new LatLon(51.5136, -0.0983);\nvar p2 = new LatLon(51.4778, -0.0015);\nvar p3 = LatLon.intersection(p1, 120, p2, 10);\n// p3 = 51°28′43″N, 000°00′05″W\n```\n\n\n### rhumbDistanceTo(point)\n\nReturns the distance from this point to the supplied point, in km, travelling along a rhumb line.\n(see http://williams.best.vwh.net/avform.htm#Rhumb)\n\n- __point__ (LatLon) Latitude/longitude of destination point\n\n```\nvar p1 = new LatLon(51.5136, -0.0983);\nvar p2 = new LatLon(51.4778, -0.0015);\nvar dist = p1.rhumbDistanceTo(p2);\n// => 7.794\n```\n\n\n### rhumbBearingTo(point)\n\nReturns the bearing from this point to the supplied point along a rhumb line, in degrees from North.\n\n- __point__ (LatLon) Latitude/longitude of destination point\n\n```\nvar p1 = new LatLon(51.5136, -0.0983);\nvar p2 = new LatLon(51.4778, -0.0015);\nvar dist = p1.rhumbBearingTo(p2);\n// => 120.71209100924256\n```\n\n\n### rhumbDestinationPoint(brng, dist)\n\nReturns the destination point from this point having travelled the given distance (in km) on the given bearing along a rhumb line.\n\n- __brng__ (number) Bearing in degrees from North\n- __dist__ (number) Distance in km\n\n```\nvar p1 = new LatLon(51.5136, -0.0983);\nvar p2 = p1.rhumbDestinationPoint(120, 10);\n// p2 = 51°28′07″N, 000°01′36″E (as LatLon object)\n```\n\n\n### rhumbMidpointTo(point)\n\nReturns the loxodromic midpoint (along a rhumb line) between this point and the supplied point.\n(see http://mathforum.org/kb/message.jspa?messageID=148837)\n\n- __point__ (LatLon) Latitude/longitude of destination point\n\n```\nvar p1 = new LatLon(51.5136, -0.0983);\nvar p2 = new LatLon(51.4778, -0.0015);\nvar p3 = p1.rhumbMidpointTo(p2);\n// p3 = 51°29′45″N, 000°03′00″W (as LatLon object)\n```\n\n\n### lat(format, dp)\n\nReturns the latitude of this point; signed numeric degrees if no format, otherwise format and dp as per `Geo.toLat()`.\n\n- __format__ (string, optional) Return value as `d`, `dm`, `dms`\n- __dp__ (number, optional, 0|2|4) Number of decimal places to display\n\n```\nvar p1 = new LatLon(51.5136, -0.0983);\nvar lat = p1.lat();\n// => 51.5136\nlat = p1.lat('d');\n// => 51.5136°N\nlat = p1.lat('dm');\n// => 51°30.82′N\nlat = p1.lat('dms');\n// => 51°30′49″N\nlat = p1.lat('d', 2);\n// => 51.51°N\n```\n\n\n### lon(format, dp)\n\nReturns the longitude of this point; signed numeric degrees if no format, otherwise format and dp as per `Geo.toLon()`.\n\n- __format__ (string, optional) Return value as `d`, `dm`, `dms`\n- __dp__ (number, 0|2|4) Number of decimal places to display\n\n```\nvar p1 = new LatLon(51.5136, -0.0983);\nvar lon = p1.lon();\n// => -0.0983\nlon = p1.lon('d');\n// => 000.0983°W\nlon = p1.lon('dm');\n// => 000°05.90′W\nlon = p1.lon('dms');\n// => 000°05′54″W\nlon = p1.lon('d', 2);\n// => 000.10°W\n```\n\n\n\nCopyright and license\n---------------------\n\nThe original code was written by Chris Veness and can be found at\nhttp://www.movable-type.co.uk/scripts/latlong.html. It is released under the\nsimple Creative Commons attribution license\n(http://creativecommons.org/licenses/by/3.0/).\n\nThis project is released under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "mt-latlon@0.0.3",
  "dist": {
    "shasum": "1c5f0096492d67c1d3faac5220aeaac6be21d24d"
  },
  "_from": "mt-latlon@0.0.3",
  "_resolved": "https://registry.npmjs.org/mt-latlon/-/mt-latlon-0.0.3.tgz"
}
