{
  "name": "mt-geo",
  "version": "0.0.2",
  "description": "Geodesy representation conversion functions.",
  "main": "mt-geo.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/peterhaldbaek/mt-geo.git"
  },
  "keywords": [
    "geo",
    "geodesy",
    "longitude",
    "latitude",
    "dms",
    "bearing"
  ],
  "author": {
    "name": "Peter Haldbæk",
    "email": "peter.haldbaek@gmail.com"
  },
  "contributors": [
    {
      "name": "Peter Haldbæk",
      "email": "peter.haldbaek@gmail.com",
      "url": "https://github.com/peterhaldbaek"
    }
  ],
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/peterhaldbaek/mt-geo/issues"
  },
  "homepage": "https://github.com/peterhaldbaek/mt-geo",
  "readme": "mt-geo\n======\n\nGeodesy representation conversion functions.\n\n\nInstallation\n------------\n\n    $ npm install mt-geo\n\n\nUsage\n-----\n\nThe module is initialized like every other Node module.\n\n    var geo = require('mt-geo');\n\nThe module contains functions for converting geodesy representations.\n\n\n### parseDMS(dms)\n\nParses string representing degrees/minutes/seconds into numeric degrees.\n\nThis is very flexible on formats, allowing signed decimal degrees, or deg-min-sec optionally\nsuffixed by compass direction (NSEW). A variety of separators are accepted (eg 3º 37' 09\"W) \nor fixed-width format without separators (eg. 0033709W). Seconds and minutes may be omitted.\n(Note minimal validation is done).\n\n- __dms__ (string|number) Degrees or deg/min/sec in variety of formats\n\n```\nvar latitude = geo.parseDMS('51° 28′ 40.12″ N');\n// => 51.477811\nvar longitude = geo.parseDMS('000° 00′ 05.31″ W');\n// => -0.001475\n```\n\n\n### toDMS(deg, format, dp)\n\nConvert decimal degrees to deg/min/sec format.\nDegree, prime, double-prime symbols are added, but sign is discarded, though no compass\ndirection is added\n\n- __deg__ (number) Degrees\n- __format__ (string, optional) Return value as 'd', 'dm', 'dms'\n- __dp__ (number, optional) No of decimal places to use - default 0 for dms, 2 for dm, 4 for d\n\n```\nvar dms = geo.toDMS('47.54');\n// => 047°32′24″\n```\n\n\n### toLat(deg, format, dp)\n\nConvert numeric degrees to deg/min/sec latitude (suffixed with N/S).\n\n- __deg__ (number) Degrees\n- __format__ (string, optional) Return value as 'd', 'dm', 'dms'\n- __dp__ (number, optional) No of decimal places to use - default 0 for dms, 2 for dm, 4 for d\n\n```\nvar latitude = geo.toLat('47.54');\n// => 47°32′24″N\n```\n\n\n### toLon(deg, format, dp)\n\nConvert numeric degrees to deg/min/sec longitude (suffixed with E/W).\n\n- __deg__ (number) Degrees\n- __format__ (string, optional) Return value as 'd', 'dm', 'dms'\n- __dp__ (number, optional) No of decimal places to use - default 0 for dms, 2 for dm, 4 for d\n\n```\nvar longitude = geo.toLon('47.54');\n// => 047°32′24″E\n```\n\n\n### toBearing(deg, format, dp)\n\nConvert numeric degrees to deg/min/sec as a bearing (0º..360º).\n\n- __deg__ (number) Degrees\n- __format__ (string, optional) Return value as 'd', 'dm', 'dms'\n- __dp__ (number, optional) No of decimal places to use - default 0 for dms, 2 for dm, 4 for d\n\n```\nvar bearing = geo.toBearing('47.54');\n// => 047°32′24″\n```\n\n\n\nCopyright and license\n---------------------\n\nThe original code was written by Chris Veness and can be found at\nhttp://www.movable-type.co.uk/scripts/latlong.html. It is released under the\nsimple Creative Commons attribution license\n(http://creativecommons.org/licenses/by/3.0/).\n\nThis project is released under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "mt-geo@0.0.2",
  "_from": "mt-geo@0.0.2"
}
